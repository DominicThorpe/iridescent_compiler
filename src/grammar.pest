WHITESPACE = _{" " | NEWLINE }
COMMENT = _{("/*" ~ (!"*/" ~ ANY)* ~ "*/")}
program = {SOI ~ function_decl* ~ EOI}

identifier = @{!(bool_literal ~ !ASCII_ALPHANUMERIC) ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*}
int_literal = @{("0b" ~ ("0" | "1")+) | ("0x" ~ ASCII_HEX_DIGIT+) | ASCII_DIGIT+}
long_literal = @{int_literal ~ "l"}
byte_literal = @{int_literal ~ "b"}
float_literal = @{ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+}
double_literal = @{float_literal ~ "d"}
string_literal = @{"\"" ~ (!"\"" ~ ANY)* ~ "\""}
char_literal = {"'" ~ ANY ~ "'"}
bool_literal = {"true" | "false"}
number = {float_literal 
		  | byte_literal 
		  | long_literal 
		  | int_literal
		 }

primitive_type = @{"string" 
				   | "char" 
				   | "int" 
				   | "float" 
				   | "void" 
				   | "long" 
				   | "double" 
				   | "bool" 
				   | "byte"
				  }

value = {string_literal 
		 | char_literal 
		 | double_literal 
		 | float_literal 
		 | bool_literal 
		 | long_literal 
		 | byte_literal 
		 | int_literal
		}

parameter = ${primitive_type ~ WHITESPACE+ ~ identifier}
param_list = {(parameter ~ ",")* ~ parameter}
value_list = {((identifier | value) ~ ",")* ~ (identifier | value)}
function_decl = {"fn" ~ primitive_type ~ identifier ~ "(" ~ param_list? ~ ")" ~ "{" ~ statement* ~ "}"}
function_call = {identifier ~ "(" ~ value_list? ~ ")"}

print = {"print" ~ "<<" ~ ((identifier | value) ~ "<<")* ~ (identifier | value) ~ ";"}
binary_operator = {"+" | "-" | "*" | "/"  | "&" | "|" | "^" | ">>>" | ">>" | "<<"}
unary_operator = {"~" | "!" | "-"}
term = {type_cast 
		| function_call 
		| expression 
		| identifier 
		| value
	   }
expression = {"(" ~ term ~ "," ~ term ~ ")" ~ binary_operator
			  | "(" ~ term ~ ")" ~ unary_operator}

continue_stmt = {"continue" ~ ";"}
break_stmt = {"break" ~ ";"}
statement = !{var_assign | var_decl | return_stmt | for_loop | indef_loop | while_loop
				| print | if_structure | function_call ~ ";" | continue_stmt | break_stmt}
ternary_expr = {boolean_expr ~ "?" ~ term ~ ":" ~ term}
type_cast = {primitive_type ~ "(" ~ (identifier | value) ~ ")"}

indef_loop = {"loop" ~ "{" ~ statement* ~ "}"}
for_loop = {"for " ~ primitive_type ~ identifier ~ "=" ~ (expression | term) ~ "until" ~ (expression | term) ~ ("step" ~ (expression | term))? ~ "{" ~ statement* ~ "}"}
while_loop = {"while" ~ boolean_expr ~ "{" ~ statement* ~ "}"}

boolean_binary_operator = {"==" | "!=" | ">=" | "<=" | ">" | "<"}
boolean_connector = {"&&" | "||" | "^^"}
boolean_unary_operator = {"!"}
boolean_term = {"(" ~ boolean_term ~ "," ~ boolean_term ~ ")" ~ boolean_binary_operator
				| "(" ~ boolean_term ~ ")" ~ boolean_unary_operator
                | term}
boolean_expr = {"(" ~ boolean_expr ~ "," ~ boolean_expr ~ ")" ~ boolean_connector
				| "(" ~ boolean_expr ~ ")" ~ boolean_unary_operator
                | boolean_term}
if_stmt = {"if" ~ boolean_expr ~ "{" ~ statement* ~ "}"}
elif_stmt = {"else" ~ "if" ~ boolean_expr ~ "{" ~ statement* ~ "}"}
else_stmt = {"else" ~ "{" ~ statement* ~ "}"}
if_structure = {if_stmt ~ elif_stmt* ~ else_stmt?}

mutability_mod = {"mut" | "const"}
var_decl = {"let " ~ mutability_mod? ~ primitive_type ~ identifier ~ "=" ~ (expression | ternary_expr | term) ~ ";"}
var_assign = {identifier ~ "=" ~ (expression | ternary_expr | term) ~ ";"}
return_stmt = {"return " ~ (expression | term) ~ ";"}
