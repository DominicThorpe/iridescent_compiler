WHITESPACE = _{" " | NEWLINE }
COMMENT = _{("/*" ~ (!"*/" ~ ANY)* ~ "*/")}
program = {SOI ~ function_decl* ~ EOI}

int_literal = @{("0b" ~ ("0" | "1")*) | ("0x" ~ ASCII_HEX_DIGIT*) | ASCII_DIGIT*}
float = @{ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+}
number = {float | int_literal}
string = @{"\"" ~ (!"\"" ~ ANY)* ~ "\""}
char = {"'" ~ ANY ~ "'"}
primitive_type = @{("string" | "char" | "int" | "float" | "void" | "long" | "double")}
identifier = @{(ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC | "_")*}
value = {string | char | float | int_literal}

parameter = @{primitive_type ~ WHITESPACE+ ~ identifier}
param_list = {((parameter ~ ",")* ~ parameter)}
value_list = {((value ~ ",")* ~ value)}
function_decl = {"fn" ~ primitive_type ~ identifier ~ "(" ~ param_list? ~ ")" ~ "{" ~ statement* ~ "}"}
function_call = {identifier ~ "(" ~ value_list? ~ ")"}

print = {"print" ~ ((identifier | value ) ~ ",")* ~ (identifier | value) ~ ";"}
binary_operator = {("+" | "-" | "*" | "/"  | "&" | "|" | "^" | ">>>" | ">>" | "<<")}
unary_operator = {"~" | "!" | "-"}
term = {expression | identifier | value}
expression = {"(" ~ term ~ "," ~ term ~ ")" ~ binary_operator
				| "(" ~ term ~ ")" ~ unary_operator}
statement = !{var_assign | var_decl | return_stmt | for_loop | loop 
				| print | if_stmt | function_call ~ ";" 
                | "break" ~ ";" | "continue" ~ ";"}

loop = {"loop" ~ "{" ~ statement* ~ "}"}
for_loop = {"for " ~ var_decl ~ "until " ~ (identifier | number) ~ ("step " ~ (identifier | number))? ~ "{" ~ statement* ~ "}"}

boolean_binary_operator = {"==" | "!=" | ">" | "<" | ">=" | "<=" | "or" | "and"}
boolean_unary_operator = {"!"}
boolean_expr = {"(" ~ (boolean_expr | term) ~ "," ~ (boolean_expr | term) ~ ")" ~ boolean_binary_operator
			| "(" ~ (boolean_expr | term) ~ ")" ~ boolean_unary_operator}
if = {"if" ~ boolean_expr ~ "{" ~ statement* ~ "}"}
else_if = {"else" ~ "if" ~ boolean_expr ~ "{" ~ statement* ~ "}"}
else = {"else" ~ "{" ~ statement* ~ "}"}
if_stmt = {if ~ else_if* ~ else?}

mutability_mod = {("mut" | "const")}
var_decl = {"let " ~ mutability_mod? ~ primitive_type ~ identifier ~ "=" ~ (expression | term) ~ ";"}
var_assign = {identifier ~ "=" ~ (expression | term) ~ ";"}
return_stmt = {"return " ~ (expression | term) ~ ";"}
